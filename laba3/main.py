from imports import *

@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    records = sheet.get_all_records()

    for row in records:
        if str(row["chat_id"]) == str(chat_id):
            bot.send_message(chat_id, "‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!\n\n"
                                      "–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /me üòâ")
            return

    bot.send_message(chat_id, "üëã –í—ñ—Ç–∞—é! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ—Å—è —É —Å–∏—Å—Ç–µ–º—ñ.\n\n"
                              "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É üëá")

    markup = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton(text=g, callback_data=f"group:{g}") for g in GROUPS]
    for i in range(0, len(buttons), 2):
        markup.row(*buttons[i:i+2])

    bot.send_message(chat_id, "üìå –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("group:"))
def callback_group(call):
    chat_id = call.message.chat.id
    group = call.data.split(":")[1]

    bot.send_message(chat_id, f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É: *{group}* üéì", parse_mode="Markdown")
    msg = bot.send_message(chat_id, "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ).\n\n"
                                    "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á`", parse_mode="Markdown")
    bot.register_next_step_handler(msg, process_student, chat_id, group)

def process_student(message, chat_id, group):
    student = message.text.strip()
    if len(student.split()) != 3:
        msg = bot.send_message(chat_id, "‚ùå –ü–Ü–ë –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ —Ç—Ä—å–æ—Ö —Å–ª—ñ–≤.\n\n"
                                        "‚úÖ –ü—Ä–∏–∫–ª–∞–¥: `–ü–µ—Ç—Ä–µ–Ω–∫–æ –û–ª–µ–≥ –°–µ—Ä–≥—ñ–π–æ–≤–∏—á`\n"
                                        "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_student, chat_id, group)
        return

    msg = bot.send_message(chat_id, "üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à e-mail.\n\n"
                                    "‚úÖ –ü—Ä–∏–∫–ª–∞–¥: `student@example.com`")
    bot.register_next_step_handler(msg, process_email, chat_id, group, student)

def process_email(message, chat_id, group, student):
    email = message.text.strip()
    if "@" not in email:
        msg = bot.send_message(chat_id, "‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ e-mail üòÖ\n\n"
                                        "‚úÖ –ü—Ä–∏–∫–ª–∞–¥: `student@ukr.net`\n"
                                        "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_email, chat_id, group, student)
        return

    msg = bot.send_message(chat_id, "üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ *+380XXXXXXXXX* (13 —Å–∏–º–≤–æ–ª—ñ–≤).\n\n"
                                    "‚úÖ –ü—Ä–∏–∫–ª–∞–¥: `+380931234567`", parse_mode="Markdown")
    bot.register_next_step_handler(msg, process_phone, chat_id, group, student, email)

def process_phone(message, chat_id, group, student, email):
    phone = message.text.strip()
    if not (phone.startswith("+380") and phone[1:].isdigit() and len(phone) == 13):
        msg = bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üò¢\n"
                                        "–í—ñ–Ω –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ *+380XXXXXXXXX* —Ç–∞ –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 13 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
                                        "‚úÖ –ü—Ä–∏–∫–ª–∞–¥: `+380671112233`\n"
                                        "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_phone, chat_id, group, student, email)
        return

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([now, chat_id, group, student, email, phone, ""])
    bot.send_message(chat_id, "üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!\n\n"
                              "–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó –¥–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–æ—é /me üòâ")

@bot.message_handler(commands=['me'])
def me_handler(message):
    chat_id = message.chat.id
    records = sheet.get_all_records()

    for row in records:
        if str(row["chat_id"]) == str(chat_id):
            response = (f"üìå *–í–∞—à—ñ –¥–∞–Ω—ñ:*\n\n"
                        f"üë• –ì—Ä—É–ø–∞: {row['–ì—Ä—É–ø–∞']}\n"
                        f"üéì –°—Ç—É–¥–µ–Ω—Ç: {row['–°—Ç—É–¥–µ–Ω—Ç']}\n"
                        f"üìß E-mail: {row['e-mail']}\n"
                        f"üì± –ù–æ–º–µ—Ä: {row['–ù–æ–º–µ—Ä']}")
            bot.send_message(chat_id, response, parse_mode="Markdown")
            return

    bot.send_message(chat_id, "‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏.")

@bot.message_handler(commands=['promt'])
def promt_handler(message):
    msg = bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ ChatGPT.\n\n"
                                            "‚úÖ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: *–Ø–∫—ñ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ –û–û–ü?*", parse_mode="Markdown")
    bot.register_next_step_handler(msg, process_promt)


def process_promt(message):
    chat_id = message.chat.id
    question = message.text
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    try:
        completion = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": question}]
        )
        answer = completion.choices[0].message.content

        records = sheet.get_all_records()
        for row in records:
            if str(row["chat_id"]) == str(chat_id):
                sheet.append_row([now, chat_id, row["–ì—Ä—É–ø–∞"], row["–°—Ç—É–¥–µ–Ω—Ç"],
                                  row["e-mail"], row["–ù–æ–º–µ—Ä"], f"Q: {question}\nA: {answer}"])
                break

        bot.send_message(chat_id, f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT:\n\n{answer}")
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ ChatGPT: {e}")

if __name__ == "__main__":
    bot.polling(none_stop=True)
